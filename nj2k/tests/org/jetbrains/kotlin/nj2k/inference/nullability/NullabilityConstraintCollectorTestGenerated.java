/*
 * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.nj2k.inference.nullability;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("nj2k/testData/inference/nullability/constraints")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class NullabilityConstraintCollectorTestGenerated extends AbstractNullabilityConstraintCollectorTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
    }

    public void testAllFilesPresentInConstraints() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("nj2k/testData/inference/nullability/constraints"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("arrayOfNulls.kt")
    public void testArrayOfNulls() throws Exception {
        runTest("nj2k/testData/inference/nullability/constraints/arrayOfNulls.kt");
    }

    @TestMetadata("binaryExpressionOperand.kt")
    public void testBinaryExpressionOperand() throws Exception {
        runTest("nj2k/testData/inference/nullability/constraints/binaryExpressionOperand.kt");
    }

    @TestMetadata("callExternallyAnnotatedJavaFunction.kt")
    public void testCallExternallyAnnotatedJavaFunction() throws Exception {
        runTest("nj2k/testData/inference/nullability/constraints/callExternallyAnnotatedJavaFunction.kt");
    }

    @TestMetadata("compareWithNull.kt")
    public void testCompareWithNull() throws Exception {
        runTest("nj2k/testData/inference/nullability/constraints/compareWithNull.kt");
    }

    @TestMetadata("ifCondition.kt")
    public void testIfCondition() throws Exception {
        runTest("nj2k/testData/inference/nullability/constraints/ifCondition.kt");
    }

    @TestMetadata("listOfWithNullLiteral.kt")
    public void testListOfWithNullLiteral() throws Exception {
        runTest("nj2k/testData/inference/nullability/constraints/listOfWithNullLiteral.kt");
    }

    @TestMetadata("loopIterator.kt")
    public void testLoopIterator() throws Exception {
        runTest("nj2k/testData/inference/nullability/constraints/loopIterator.kt");
    }

    @TestMetadata("map.kt")
    public void testMap() throws Exception {
        runTest("nj2k/testData/inference/nullability/constraints/map.kt");
    }

    @TestMetadata("nullLiteral.kt")
    public void testNullLiteral() throws Exception {
        runTest("nj2k/testData/inference/nullability/constraints/nullLiteral.kt");
    }

    @TestMetadata("returnNull.kt")
    public void testReturnNull() throws Exception {
        runTest("nj2k/testData/inference/nullability/constraints/returnNull.kt");
    }

    @TestMetadata("spreadExpression.kt")
    public void testSpreadExpression() throws Exception {
        runTest("nj2k/testData/inference/nullability/constraints/spreadExpression.kt");
    }

    @TestMetadata("useAsReceiver.kt")
    public void testUseAsReceiver() throws Exception {
        runTest("nj2k/testData/inference/nullability/constraints/useAsReceiver.kt");
    }

    @TestMetadata("whileCondition.kt")
    public void testWhileCondition() throws Exception {
        runTest("nj2k/testData/inference/nullability/constraints/whileCondition.kt");
    }
}
